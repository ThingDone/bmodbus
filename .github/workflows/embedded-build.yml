# This is used to build arduino sketches and run them on physical hardware on our test servers.
name: Embedded Build and Test
on:
  workflow_call:
    inputs:
      board:
        required: true
        type: string
      build_type:
        required: false
        type: string
        default: "build_and_test"
      skip_all_builds:
        required: false
        type: string
        default: "build_all"  # Set to 'skip' to skip all builds, useful for testing purposes
      s8051_build:
        required: false
        type: string
        default: "skip"  # Set to 'skip' to skip the 8051 build, useful for testing purposes



jobs:
  arduino_builds:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Cache Arduino CLI
        uses: actions/cache@v3
        with:
          path: |
            ~/.arduino15
          key: ${{ runner.os }}-arduino-${{ github.sha }}
          restore-keys: ${{ runner.os }}-arduino-

      - name: Install Arduino CLI
        uses: arduino/setup-arduino-cli@v2
      - name: Arduino CLI init
        continue-on-error: true
        run: |
          arduino-cli config init
      - name: Setting up Arduino CLI Cores
        run: |
          arduino-cli config add board_manager.additional_urls https://adafruit.github.io/arduino-board-index/package_adafruit_index.json
          arduino-cli config add board_manager.additional_urls https://espressif.github.io/arduino-esp32/package_esp32_index.json
          arduino-cli config add board_manager.additional_urls https://github.com/earlephilhower/arduino-pico/releases/download/global/package_rp2040_index.json
          arduino-cli config add board_manager.additional_urls https://raw.githubusercontent.com/DeqingSun/ch55xduino/ch55xduino/package_ch55xduino_mcs51_index.json
          arduino-cli core update-index
          arduino-cli core install adafruit:samd
          arduino-cli core install esp32:esp32
          arduino-cli core install arduino:avr
          arduino-cli core install rp2040:rp2040
          arduino-cli core install CH55xDuino:mcs51
      - name: Dumping stuff
        run: |
          cd ./tests/arduino
          ls -l 
          ls -l arduino_unit_tests
      - name: Setup CMake
        uses: lukka/get-cmake@latest
        #run: |
        #  sudo apt-get update -q -y
        #  sudo apt-get install -q -y cmake
        #  cmake --version
      - name: Running CMake
        run: |
          cd ./tests/arduino
          mkdir build
          cd build
          cmake ..
      - name: Building Unit Tests
        if: ${{ inputs.skip_all_builds != 'skip' }}
        run: |
          cd ./tests/arduino/build
          TARGET_BOARD=${{ inputs.board }}
          TARGET_BOARD=build.${TARGET_BOARD//:/\.}.arduino_unit_tests
          echo "TARGET_BOARD: $TARGET_BOARD"
          cmake --build . -v --target $TARGET_BOARD
      - name: Running Unit Tests
        env:
          TEST_SERVER_URL: ${{ secrets.TEST_SERVER_URL }}
          TARGET_BOARD: ${{ inputs.board }}
        if: ${{ (inputs.build_type == 'build_and_test') && (inputs.skip_all_builds != 'skip') }}
        run: |
          cd ./tests/arduino
          echo ${{ inputs.board }} ${TEST_SERVER_URL}
          echo "FIXME: Get it to run on the test servers!"
          echo "Running: run_my_program.py $TARGET_BOARD ./arduino_unit_tests/interactive_tests.py ./arduino_unit_tests $TEST_SERVER_URL"
          python run_my_program.py $TARGET_BOARD ./arduino_unit_tests/interactive_tests.py ./arduino_unit_tests $TEST_SERVER_URL
      - name: Building Arduino Client Example
        if: ${{ inputs.skip_all_builds != 'skip' }}
        run: |
          cd ./tests/arduino/build
          TARGET_BOARD=${{ inputs.board }}
          TARGET_BOARD=build.${TARGET_BOARD//:/\.}.arduino_client_example
          echo "TARGET_BOARD: $TARGET_BOARD"
          cmake --build . -v --target $TARGET_BOARD
      - name: Running Client Example
        env:
          TEST_SERVER_URL: ${{ secrets.TEST_SERVER_URL }}
          TARGET_BOARD: ${{ inputs.board }}
        if: ${{ (inputs.build_type == 'build_and_test') && (inputs.skip_all_builds != 'skip') }}
        run: |
          cd ./tests/arduino
          echo ${{ inputs.board }} ${TEST_SERVER_URL}
          echo "FIXME: Get it to run on the test servers!"
          echo "Running: run_my_program.py $TARGET_BOARD ./arduino_client_example/interactive_tests.py ./arduino_client_example $TEST_SERVER_URL"
          python run_my_program.py $TARGET_BOARD ./arduino_client_example/interactive_tests.py ./arduino_client_example $TEST_SERVER_URL
      - name: Building Arduino Client Example
        if: ${{ inputs.s8051_build != 'skip' }}
        run: |
          cd ./tests/arduino/build
          TARGET_BOARD=build.CH55xDuino.mcs51.ch552.clock.16internal.8051_client
          echo "TARGET_BOARD: $TARGET_BOARD"
          cmake --build . -v --target $TARGET_BOARD