# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake Tests BigEndian

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  s390x_job:
    # The host should always be Linux
    runs-on: ubuntu-22.04
    name: Build on ubuntu-22.04 s390x
    steps:
      - uses: actions/checkout@v4
      - uses: uraimo/run-on-arch-action@v3
        name: Run commands
        id: runcmd
        with:
          arch: s390x
          distro: ubuntu22.04

          # Not required, but speeds up builds by storing container images in
          # a GitHub package registry.
          githubToken: ${{ github.token }}
          install: |
            apt-get update -q -y
            apt-get install -q -y cmake
          # Set an output parameter `uname` for use in subsequent steps
          run: |
            uname -a
            echo ::set-output name=uname::$(uname -a)
            echo "CMake version"
            if which cmake > /dev/null 2>&1; then
              echo "cmake is in the PATH"
            else
              echo "cmake is NOT in the PATH"
            fi
          #  which cmake
          #  echo ::set-output name=cmake::$(which cmake)
          #  echo ::set-output name=uname::$(uname -a)
          #  cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
          #  cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
          #  ctest -C ${{env.BUILD_TYPE}} --output-on-failure

      - name: Get the output
        # Echo the `uname` output parameter from the `runcmd` step
        run: |
          echo "The uname output was ${{ steps.runcmd.outputs.uname }}"
          echo "${{ steps.runcmd.outputs.cmake }}"

#      - name: Configure CMake
#        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}
#
#      - name: Build
#        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}
#
#      - name: Test
#        working-directory: ${{github.workspace}}/build
#        run: ctest -C ${{env.BUILD_TYPE}} --output-on-failure